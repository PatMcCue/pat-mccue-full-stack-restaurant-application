export { ApolloClient, ApolloClientOptions, DefaultOptions, } from '@apollo/src/core/ApolloClient';
export { ObservableQuery, FetchMoreOptions, UpdateQueryOptions, } from '@apollo/src/core/ObservableQuery';
export { QueryBaseOptions, QueryOptions, WatchQueryOptions, MutationOptions, SubscriptionOptions, FetchPolicy, WatchQueryFetchPolicy, ErrorPolicy, FetchMoreQueryOptions, SubscribeToMoreOptions, MutationUpdaterFn, } from '@apollo/src/core/watchQueryOptions';
export { NetworkStatus } from '@apollo/src/core/networkStatus';
export * from '@apollo/src/core/types';
export { Resolver, FragmentMatcher, } from '@apollo/src/core/LocalState';
export { isApolloError, ApolloError } from '@apollo/src/errors';
export { Cache, ApolloCache, Transaction, DataProxy, InMemoryCache, InMemoryCacheConfig, MissingFieldError, defaultDataIdFromObject, ReactiveVar, makeVar, TypePolicies, TypePolicy, FieldPolicy, FieldReadFunction, FieldMergeFunction, FieldFunctionOptions, PossibleTypesMap, } from '@apollo/src/cache';
export * from '@apollo/src/cache/inmemory/types';
export * from '@apollo/src/link/core';
export * from '@apollo/src/link/http';
export { fromError, toPromise, fromPromise, ServerError, throwServerError, } from '@apollo/src/link/utils';
export { Observable, Observer, ObservableSubscription, Reference, isReference, makeReference, StoreObject, } from '@apollo/src/utilities';
import gql from 'graphql-tag';
export declare const resetCaches: typeof gql.resetCaches, disableFragmentWarnings: typeof gql.disableFragmentWarnings, enableExperimentalFragmentVariables: typeof gql.enableExperimentalFragmentVariables, disableExperimentalFragmentVariables: typeof gql.disableExperimentalFragmentVariables;
export { gql };
//# sourceMappingURL=index.d.ts.map